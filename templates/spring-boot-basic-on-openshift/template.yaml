apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: spring-boot-basic-on-openshift-template
  title: Create a Spring Boot app for OpenShift
  description: Create a Spring Boot app for OpenShift
  tags:
    - spring-boot
    - java
    - maven
    - renovate
    - openshift
spec:
  owner: cyberbugjr
  system: microservices
  type: service

  parameters:
    - title: ‚úèÔ∏è Provide information about the new component
      required:
        - orgName
        - appName
        - domainName
        - repoBranchName
        - groupId
        - javaPackage
        - apiPath
        - namespace
        - description
        - registryUrl
        - clusterDomain
      properties:
        orgName:
          title: Organization name
          type: string
          default: ocsin
        appName:
          title: App name
          type: string
          default: SprintBootX-App
        domainName:
          title: Name of the domain object
          type: string
          default: Benjamin Calvet
        repoBranchName:
          title: Name of the branch in the Git repository
          type: string
          default: main
        groupId:
          title: Maven Group ID
          type: string
          default: org.ocsin.proj
        javaPackage:
          title: Java package directory
          type: string
          default: org/ocsin/services
        apiPath:
          title: REST API path
          type: string
          default: /api/v1
        namespace:
          title: The target namespace on Kubernetes
          type: string
          default: app-4321-bcalvet
        description:
          title: Description
          type: string
          default: Spring Boot App Generated by Backstage
        registryUrl:
          title: Registry URL
          type: string
          default: TO-REPLACE-OCSIN-REG
        clusterDomain:
          title: OpenShift Cluster Domain
          type: string
          default: soca-lab-1.lbdev.test.local
  steps:
    - id: sourceCodeTemplate
      name: Generating the Source Code Component
      action: fetch:template
      input:
        url: ./skeleton
        values:
          orgName: ${{ parameters.orgName }}
          appName: ${{ parameters.appName }}
          domainName: ${{ parameters.domainName }}
          groupId: ${{ parameters.groupId }}
          javaPackage: ${{ parameters.javaPackage }}
          apiPath: ${{ parameters.apiPath }}
          namespace: ${{ parameters.namespace }}

    - id: publish
      name: üêô Publishing to the Source Code Repository (Main)
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: ${{ parameters.description }}
        repoUrl: github.com?owner=${{ parameters.orgName }}&repo=${{ parameters.appName }}
        defaultBranch: ${{ parameters.repoBranchName }}
        protectDefaultBranch: false
        repoVisibility: public

    - id: register
      name: üìö Registering the Catalog Info Component
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: /catalog-info.yaml

    - id: configCodeTemplate
      name: üñ•Ô∏è Generating the Config Code Component
      action: fetch:template
      input:
        url: ../../skeletons/argocd
        values:
          orgName: ${{ parameters.orgName }}
          appName: ${{ parameters.appName }}
          registryUrl: ${{ parameters.registryUrl }}
          namespace: ${{ parameters.namespace }}
          repoBranchName: ${{ parameters.repoBranchName }}
        targetPath: ./gitops

    - id: publish
      name: üêô Publishing to the Config Code Repository
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: ${{ parameters.description }}
        repoUrl: github.com?owner=${{ parameters.orgName }}&repo=${{ parameters.appName }}-config
        defaultBranch: ${{ parameters.repoBranchName }}
        sourcePath: ./gitops
        repoVisibility: public

#    - id: sonarqube
#      name: Create a new project on Sonarcloud
#      action: http:backstage:request
#      input:
#        method: 'POST'
#        path: '/proxy/sonarqube/projects/create?name=${{ parameters.appName }}&organization=${{ parameters.orgName }}&project=${{ parameters.orgName }}_${{ parameters.appName }}'
#        headers:
#          content-type: 'application/json'

#    - id: sonarqube
#      name: Create new project on Sonarqube
#      action: sonarqube:create-project
#      input:
#        baseUrl: 'https://sonarcloud.io'
#        token: ${{ parameters.sonarToken }}
#        name: '${{ parameters.appName }}'
#        key: '${{ parameters.orgName }}_${{ parameters.appName }}'
#        branch: 'master'
#        visibility: 'public'


  output:
    links:
      - title: Open the Source Code Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open the Catalog Info Component
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}
      - title: SonarQube project URL
        url: ${{ steps['create-sonar-project'].output.projectUrl }}
